prog: UNITTYPE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE UNPAIR
##
## Ends in an error in state: 1.
##
## iface_or_class_decl -> INTERFACE . ID LBRACE list(abstract_method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INTERFACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID UNPAIR
##
## Ends in an error in state: 2.
##
## iface_or_class_decl -> INTERFACE ID . LBRACE list(abstract_method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INTERFACE ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE UNPAIR
##
## Ends in an error in state: 3.
##
## iface_or_class_decl -> INTERFACE ID LBRACE . list(abstract_method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INTERFACE ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD UNPAIR
##
## Ends in an error in state: 4.
##
## abstract_method_decl -> METHOD . texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN TREETYPE UNPAIR
##
## Ends in an error in state: 6.
##
## texpr -> TREETYPE . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## TREETYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN REFTYPE UNPAIR
##
## Ends in an error in state: 7.
##
## texpr -> REFTYPE . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## REFTYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LPAREN UNPAIR
##
## Ends in an error in state: 8.
##
## texpr -> LPAREN . texpr RPAREN [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LISTTYPE UNPAIR
##
## Ends in an error in state: 9.
##
## texpr -> LISTTYPE . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LISTTYPE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LBRACE UNPAIR
##
## Ends in an error in state: 10.
##
## texpr -> LBRACE . loption(separated_nonempty_list(SEMICOLON,fieldtype)) RBRACE [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LBRACE ID UNPAIR
##
## Ends in an error in state: 11.
##
## fieldtype -> ID . COLON texpr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LBRACE ID COLON UNPAIR
##
## Ends in an error in state: 12.
##
## fieldtype -> ID COLON . texpr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LBRACE ID COLON BOOLTYPE RPAREN
##
## Ends in an error in state: 16.
##
## fieldtype -> ID COLON texpr . [ SEMICOLON RBRACE ]
## texpr -> texpr . ARROW texpr [ TIMES SEMICOLON RBRACE ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES SEMICOLON RBRACE ARROW ]
##
## The known suffix of the stack is as follows:
## ID COLON texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN BOOLTYPE TIMES UNPAIR
##
## Ends in an error in state: 17.
##
## texpr -> texpr TIMES . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## texpr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN BOOLTYPE ARROW UNPAIR
##
## Ends in an error in state: 19.
##
## texpr -> texpr ARROW . texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## texpr ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN BOOLTYPE ARROW BOOLTYPE UNPAIR
##
## Ends in an error in state: 20.
##
## texpr -> texpr . ARROW texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
## texpr -> texpr ARROW texpr . [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## texpr ARROW texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LBRACE ID COLON BOOLTYPE SEMICOLON UNPAIR
##
## Ends in an error in state: 25.
##
## separated_nonempty_list(SEMICOLON,fieldtype) -> fieldtype SEMICOLON . separated_nonempty_list(SEMICOLON,fieldtype) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## fieldtype SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN LPAREN BOOLTYPE SEMICOLON
##
## Ends in an error in state: 28.
##
## texpr -> texpr . ARROW texpr [ TIMES RPAREN ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES RPAREN ARROW ]
## texpr -> LPAREN texpr . RPAREN [ TIMES SEMICOLON RPAREN RBRACE ID EQUALS COMMA ARROW ]
##
## The known suffix of the stack is as follows:
## LPAREN texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE SEMICOLON
##
## Ends in an error in state: 32.
##
## abstract_method_decl -> METHOD texpr . ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
## texpr -> texpr . ARROW texpr [ TIMES ID ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## METHOD texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID UNPAIR
##
## Ends in an error in state: 33.
##
## abstract_method_decl -> METHOD texpr ID . LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN UNPAIR
##
## Ends in an error in state: 34.
##
## abstract_method_decl -> METHOD texpr ID LPAREN . loption(separated_nonempty_list(COMMA,formal_par)) RPAREN [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN ID UNPAIR
##
## Ends in an error in state: 35.
##
## formal_par -> ID . option(type_annotation) [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID COLON UNPAIR
##
## Ends in an error in state: 36.
##
## type_annotation -> COLON . texpr [ RPAREN EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID COLON BOOLTYPE SEMICOLON
##
## Ends in an error in state: 37.
##
## texpr -> texpr . ARROW texpr [ TIMES RPAREN EQUALS COMMA ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES RPAREN EQUALS COMMA ARROW ]
## type_annotation -> COLON texpr . [ RPAREN EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## COLON texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN ID COLON BOOLTYPE EQUALS
##
## Ends in an error in state: 43.
##
## separated_nonempty_list(COMMA,formal_par) -> formal_par . [ RPAREN ]
## separated_nonempty_list(COMMA,formal_par) -> formal_par . COMMA separated_nonempty_list(COMMA,formal_par) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## formal_par
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production type_annotation -> COLON texpr
## In state 38, spurious reduction of production option(type_annotation) -> type_annotation
## In state 39, spurious reduction of production formal_par -> ID option(type_annotation)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 44.
##
## separated_nonempty_list(COMMA,formal_par) -> formal_par COMMA . separated_nonempty_list(COMMA,formal_par) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## formal_par COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE METHOD BOOLTYPE ID LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 48.
##
## list(abstract_method_decl) -> abstract_method_decl . list(abstract_method_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## abstract_method_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS UNPAIR
##
## Ends in an error in state: 50.
##
## iface_or_class_decl -> CLASS . ID EXTENDS ID option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID UNPAIR
##
## Ends in an error in state: 51.
##
## iface_or_class_decl -> CLASS ID . EXTENDS ID option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS UNPAIR
##
## Ends in an error in state: 52.
##
## iface_or_class_decl -> CLASS ID EXTENDS . ID option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID UNPAIR
##
## Ends in an error in state: 53.
##
## iface_or_class_decl -> CLASS ID EXTENDS ID . option(implements_declaration) LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID IMPLEMENTS UNPAIR
##
## Ends in an error in state: 54.
##
## implements_declaration -> IMPLEMENTS . ID [ LBRACE ]
##
## The known suffix of the stack is as follows:
## IMPLEMENTS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID IMPLEMENTS ID UNPAIR
##
## Ends in an error in state: 56.
##
## iface_or_class_decl -> CLASS ID EXTENDS ID option(implements_declaration) . LBRACE list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID option(implements_declaration)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE UNPAIR
##
## Ends in an error in state: 57.
##
## iface_or_class_decl -> CLASS ID EXTENDS ID option(implements_declaration) LBRACE . list(obj_fields) list(method_decl) RBRACE [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INTERFACE INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CLASS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CLASS ID EXTENDS ID option(implements_declaration) LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD UNPAIR
##
## Ends in an error in state: 58.
##
## obj_fields -> FIELD . ID [ RBRACE METHOD FIELD ]
## obj_fields -> FIELD . texpr ID [ RBRACE METHOD FIELD ]
##
## The known suffix of the stack is as follows:
## FIELD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD ID UNPAIR
##
## Ends in an error in state: 59.
##
## obj_fields -> FIELD ID . [ RBRACE METHOD FIELD ]
## texpr -> ID . [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## FIELD ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD BOOLTYPE SEMICOLON
##
## Ends in an error in state: 60.
##
## obj_fields -> FIELD texpr . ID [ RBRACE METHOD FIELD ]
## texpr -> texpr . ARROW texpr [ TIMES ID ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## FIELD texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE FIELD ID ID UNPAIR
##
## Ends in an error in state: 62.
##
## list(obj_fields) -> obj_fields . list(obj_fields) [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## obj_fields
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD UNPAIR
##
## Ends in an error in state: 65.
##
## method_decl -> METHOD . ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
## method_decl -> METHOD . texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID UNPAIR
##
## Ends in an error in state: 66.
##
## method_decl -> METHOD ID . LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
## texpr -> ID . [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## METHOD ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN UNPAIR
##
## Ends in an error in state: 67.
##
## method_decl -> METHOD ID LPAREN . loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 69.
##
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN . LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE UNITTYPE
##
## Ends in an error in state: 70.
##
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE . expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR UNPAIR
##
## Ends in an error in state: 71.
##
## expr -> UNPAIR . LPAREN ID COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN UNPAIR
##
## Ends in an error in state: 72.
##
## expr -> UNPAIR LPAREN . ID COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID UNPAIR
##
## Ends in an error in state: 73.
##
## expr -> UNPAIR LPAREN ID . COMMA ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 74.
##
## expr -> UNPAIR LPAREN ID COMMA . ID RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 75.
##
## expr -> UNPAIR LPAREN ID COMMA ID . RPAREN EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN UNPAIR
##
## Ends in an error in state: 76.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS UNITTYPE
##
## Ends in an error in state: 77.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TL UNPAIR
##
## Ends in an error in state: 78.
##
## expr -> TL . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## TL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TL LPAREN UNITTYPE
##
## Ends in an error in state: 79.
##
## expr -> TL LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## TL LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER UNPAIR
##
## Ends in an error in state: 80.
##
## expr -> SUPER . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER ID UNPAIR
##
## Ends in an error in state: 81.
##
## expr -> SUPER ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER ID LPAREN UNITTYPE
##
## Ends in an error in state: 82.
##
## expr -> SUPER ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUM UNPAIR
##
## Ends in an error in state: 83.
##
## expr -> SUM . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUM
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUM LPAREN UNITTYPE
##
## Ends in an error in state: 84.
##
## expr -> SUM LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUM LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SND UNPAIR
##
## Ends in an error in state: 85.
##
## expr -> SND . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SND LPAREN UNITTYPE
##
## Ends in an error in state: 86.
##
## expr -> SND LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SND LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF UNPAIR
##
## Ends in an error in state: 87.
##
## expr -> SETREF . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SETREF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN UNITTYPE
##
## Ends in an error in state: 88.
##
## expr -> SETREF LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET UNPAIR
##
## Ends in an error in state: 89.
##
## expr -> SET . ID EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET ID UNPAIR
##
## Ends in an error in state: 90.
##
## expr -> SET ID . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET ID EQUALS UNITTYPE
##
## Ends in an error in state: 91.
##
## expr -> SET ID EQUALS . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND UNITTYPE
##
## Ends in an error in state: 92.
##
## expr -> SEND . expr ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROD UNPAIR
##
## Ends in an error in state: 94.
##
## expr -> PROD . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROD LPAREN UNITTYPE
##
## Ends in an error in state: 95.
##
## expr -> PROD LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROD LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC UNPAIR
##
## Ends in an error in state: 96.
##
## expr -> PROC . LPAREN ID option(type_annotation) RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN UNPAIR
##
## Ends in an error in state: 97.
##
## expr -> PROC LPAREN . ID option(type_annotation) RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID UNPAIR
##
## Ends in an error in state: 98.
##
## expr -> PROC LPAREN ID . option(type_annotation) RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID COLON BOOLTYPE EQUALS
##
## Ends in an error in state: 99.
##
## expr -> PROC LPAREN ID option(type_annotation) . RPAREN LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production type_annotation -> COLON texpr
## In state 38, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID RPAREN UNPAIR
##
## Ends in an error in state: 100.
##
## expr -> PROC LPAREN ID option(type_annotation) RPAREN . LBRACE expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID RPAREN LBRACE UNITTYPE
##
## Ends in an error in state: 101.
##
## expr -> PROC LPAREN ID option(type_annotation) RPAREN LBRACE . expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR UNPAIR
##
## Ends in an error in state: 102.
##
## expr -> PAIR . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PAIR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN UNITTYPE
##
## Ends in an error in state: 103.
##
## expr -> PAIR LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE UNPAIR
##
## Ends in an error in state: 104.
##
## expr -> NODE . LPAREN expr COMMA expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN UNITTYPE
##
## Ends in an error in state: 105.
##
## expr -> NODE LPAREN . expr COMMA expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEWREF UNPAIR
##
## Ends in an error in state: 106.
##
## expr -> NEWREF . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEWREF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEWREF LPAREN UNITTYPE
##
## Ends in an error in state: 107.
##
## expr -> NEWREF LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW UNPAIR
##
## Ends in an error in state: 108.
##
## expr -> NEW . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW ID UNPAIR
##
## Ends in an error in state: 109.
##
## expr -> NEW ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW ID LPAREN UNITTYPE
##
## Ends in an error in state: 110.
##
## expr -> NEW ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MKLIST UNPAIR
##
## Ends in an error in state: 111.
##
## expr -> MKLIST . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MKLIST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MKLIST LPAREN UNITTYPE
##
## Ends in an error in state: 112.
##
## expr -> MKLIST LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MKLIST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN UNPAIR
##
## Ends in an error in state: 113.
##
## expr -> MIN . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MIN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN UNITTYPE
##
## Ends in an error in state: 114.
##
## expr -> MIN LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MAXL UNPAIR
##
## Ends in an error in state: 115.
##
## expr -> MAXL . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MAXL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MAXL LPAREN UNITTYPE
##
## Ends in an error in state: 116.
##
## expr -> MAXL LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MAXL LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN UNITTYPE
##
## Ends in an error in state: 117.
##
## expr -> LPAREN . expr expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . MINUS expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN MINUS UNITTYPE
##
## Ends in an error in state: 119.
##
## expr -> LPAREN MINUS . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC UNPAIR
##
## Ends in an error in state: 120.
##
## expr -> LETREC . nonempty_list(rdecs) IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LETREC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID UNPAIR
##
## Ends in an error in state: 121.
##
## rdecs -> ID . LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN UNPAIR
##
## Ends in an error in state: 122.
##
## rdecs -> ID LPAREN . ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID UNPAIR
##
## Ends in an error in state: 123.
##
## rdecs -> ID LPAREN ID . option(type_annotation) RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID COLON BOOLTYPE EQUALS
##
## Ends in an error in state: 124.
##
## rdecs -> ID LPAREN ID option(type_annotation) . RPAREN option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production type_annotation -> COLON texpr
## In state 38, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN UNPAIR
##
## Ends in an error in state: 125.
##
## rdecs -> ID LPAREN ID option(type_annotation) RPAREN . option(type_annotation) EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN COLON BOOLTYPE RPAREN
##
## Ends in an error in state: 126.
##
## rdecs -> ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) . EQUALS expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN option(type_annotation)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 37, spurious reduction of production type_annotation -> COLON texpr
## In state 38, spurious reduction of production option(type_annotation) -> type_annotation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS UNITTYPE
##
## Ends in an error in state: 127.
##
## rdecs -> ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS . expr [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET UNPAIR
##
## Ends in an error in state: 128.
##
## expr -> LET . ID EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LET . LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE UNPAIR
##
## Ends in an error in state: 129.
##
## expr -> LET LANGLE . loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE ID UNPAIR
##
## Ends in an error in state: 130.
##
## separated_nonempty_list(COMMA,ID) -> ID . [ RANGLE ]
## separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ RANGLE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE ID COMMA UNPAIR
##
## Ends in an error in state: 131.
##
## separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ RANGLE ]
##
## The known suffix of the stack is as follows:
## ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE UNPAIR
##
## Ends in an error in state: 135.
##
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS UNITTYPE
##
## Ends in an error in state: 136.
##
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE UNPAIR
##
## Ends in an error in state: 137.
##
## expr -> LBRACE . loption(separated_nonempty_list(SEMICOLON,field)) RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID UNPAIR
##
## Ends in an error in state: 138.
##
## field -> ID . EQUALS expr [ SEMICOLON RBRACE ]
## field -> ID . EQUALSMUTABLE expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALSMUTABLE UNITTYPE
##
## Ends in an error in state: 139.
##
## field -> ID EQUALSMUTABLE . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALSMUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE UNITTYPE
##
## Ends in an error in state: 140.
##
## expr -> LANGLE . loption(separated_nonempty_list(COMMA,expr)) RANGLE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISZERO UNPAIR
##
## Ends in an error in state: 141.
##
## expr -> ISZERO . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ISZERO
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISZERO LPAREN UNITTYPE
##
## Ends in an error in state: 142.
##
## expr -> ISZERO LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISNUMBER UNPAIR
##
## Ends in an error in state: 143.
##
## expr -> ISNUMBER . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ISNUMBER
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISNUMBER LPAREN UNITTYPE
##
## Ends in an error in state: 144.
##
## expr -> ISNUMBER LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ISNUMBER LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF UNPAIR
##
## Ends in an error in state: 146.
##
## expr -> INSTANCEOF . LPAREN expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN UNITTYPE
##
## Ends in an error in state: 147.
##
## expr -> INSTANCEOF LPAREN . expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF UNITTYPE
##
## Ends in an error in state: 148.
##
## expr -> IF . expr THEN expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: HD UNPAIR
##
## Ends in an error in state: 150.
##
## expr -> HD . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## HD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: HD LPAREN UNITTYPE
##
## Ends in an error in state: 151.
##
## expr -> HD LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## HD LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FST UNPAIR
##
## Ends in an error in state: 152.
##
## expr -> FST . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## FST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FST LPAREN UNITTYPE
##
## Ends in an error in state: 153.
##
## expr -> FST LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## FST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYTREE UNPAIR
##
## Ends in an error in state: 154.
##
## expr -> EMPTYTREE . LPAREN option(texpr) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYTREE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYTREE LPAREN UNPAIR
##
## Ends in an error in state: 155.
##
## expr -> EMPTYTREE LPAREN . option(texpr) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYTREE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN BOOLTYPE SEMICOLON
##
## Ends in an error in state: 156.
##
## option(texpr) -> texpr . [ RPAREN ]
## texpr -> texpr . ARROW texpr [ TIMES RPAREN ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES RPAREN ARROW ]
##
## The known suffix of the stack is as follows:
## texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYPRED UNPAIR
##
## Ends in an error in state: 159.
##
## expr -> EMPTYPRED . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYPRED LPAREN UNITTYPE
##
## Ends in an error in state: 160.
##
## expr -> EMPTYPRED LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST UNPAIR
##
## Ends in an error in state: 161.
##
## expr -> EMPTYLIST . LPAREN option(texpr) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYLIST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYLIST LPAREN UNPAIR
##
## Ends in an error in state: 162.
##
## expr -> EMPTYLIST LPAREN . option(texpr) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYLIST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEREF UNPAIR
##
## Ends in an error in state: 165.
##
## expr -> DEREF . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEREF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEREF LPAREN UNITTYPE
##
## Ends in an error in state: 166.
##
## expr -> DEREF LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEBUG UNPAIR
##
## Ends in an error in state: 167.
##
## expr -> DEBUG . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEBUG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEBUG LPAREN UNITTYPE
##
## Ends in an error in state: 168.
##
## expr -> DEBUG LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS UNPAIR
##
## Ends in an error in state: 169.
##
## expr -> CONS . LPAREN expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN UNITTYPE
##
## Ends in an error in state: 170.
##
## expr -> CONS LPAREN . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST UNPAIR
##
## Ends in an error in state: 171.
##
## expr -> CAST . LPAREN expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN UNITTYPE
##
## Ends in an error in state: 172.
##
## expr -> CAST LPAREN . expr COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET UNITTYPE
##
## Ends in an error in state: 173.
##
## expr -> CASET . expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN UNITTYPE
##
## Ends in an error in state: 174.
##
## expr -> BEGIN . loption(separated_nonempty_list(SEMICOLON,expr)) END [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## BEGIN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: AVG UNPAIR
##
## Ends in an error in state: 175.
##
## expr -> AVG . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## AVG
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: AVG LPAREN UNITTYPE
##
## Ends in an error in state: 176.
##
## expr -> AVG LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## AVG LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ABS UNPAIR
##
## Ends in an error in state: 177.
##
## expr -> ABS . LPAREN expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ABS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ABS LPAREN UNITTYPE
##
## Ends in an error in state: 178.
##
## expr -> ABS LPAREN . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## ABS LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ABS LPAREN ID UNPAIR
##
## Ends in an error in state: 179.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> ABS LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## ABS LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID TIMES UNITTYPE
##
## Ends in an error in state: 180.
##
## expr -> expr TIMES . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID TIMES ID UNITTYPE
##
## Ends in an error in state: 181.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr TIMES expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr TIMES expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID DOT UNPAIR
##
## Ends in an error in state: 182.
##
## expr -> expr DOT . ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr DOT . ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID DOT ID UNITTYPE
##
## Ends in an error in state: 183.
##
## expr -> expr DOT ID . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr DOT ID . EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DOT ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID DOT ID EQUALSMUTABLE UNITTYPE
##
## Ends in an error in state: 184.
##
## expr -> expr DOT ID EQUALSMUTABLE . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DOT ID EQUALSMUTABLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID DOT ID EQUALSMUTABLE ID UNITTYPE
##
## Ends in an error in state: 185.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr DOT ID EQUALSMUTABLE expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DOT ID EQUALSMUTABLE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID RRANGLE UNITTYPE
##
## Ends in an error in state: 186.
##
## expr -> expr RRANGLE . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr RRANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID RRANGLE ID UNITTYPE
##
## Ends in an error in state: 187.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr RRANGLE expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr RRANGLE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID DIVIDED UNITTYPE
##
## Ends in an error in state: 188.
##
## expr -> expr DIVIDED . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DIVIDED
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID DIVIDED ID UNITTYPE
##
## Ends in an error in state: 189.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr DIVIDED expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr DIVIDED expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID PLUS UNITTYPE
##
## Ends in an error in state: 190.
##
## expr -> expr PLUS . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID PLUS ID UNITTYPE
##
## Ends in an error in state: 191.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr PLUS expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr PLUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID MINUS UNITTYPE
##
## Ends in an error in state: 192.
##
## expr -> expr MINUS . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID MINUS ID UNITTYPE
##
## Ends in an error in state: 193.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr MINUS expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LLANGLE UNITTYPE
##
## Ends in an error in state: 194.
##
## expr -> expr LLANGLE . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr LLANGLE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID LLANGLE ID UNITTYPE
##
## Ends in an error in state: 195.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr LLANGLE expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr LLANGLE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID EQUALS UNITTYPE
##
## Ends in an error in state: 197.
##
## expr -> expr EQUALS . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID EQUALS ID EQUALS
##
## Ends in an error in state: 198.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr EQUALS expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## expr EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: AVG LPAREN ID RANGLE
##
## Ends in an error in state: 200.
##
## expr -> AVG LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## AVG LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE ID UNPAIR
##
## Ends in an error in state: 202.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN RANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN RANGLE ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN RANGLE ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE ID COMMA UNITTYPE
##
## Ends in an error in state: 203.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN RANGLE ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN ID UNPAIR
##
## Ends in an error in state: 208.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES SEMICOLON RRANGLE PLUS MINUS LLANGLE EQUALS END DOT DIVIDED ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . [ END ]
## separated_nonempty_list(SEMICOLON,expr) -> expr . SEMICOLON separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: BEGIN ID SEMICOLON UNITTYPE
##
## Ends in an error in state: 209.
##
## separated_nonempty_list(SEMICOLON,expr) -> expr SEMICOLON . separated_nonempty_list(SEMICOLON,expr) [ END ]
##
## The known suffix of the stack is as follows:
## expr SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID UNPAIR
##
## Ends in an error in state: 211.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> CASET expr . OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS OF MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## CASET expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF UNPAIR
##
## Ends in an error in state: 212.
##
## expr -> CASET expr OF . LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE UNPAIR
##
## Ends in an error in state: 213.
##
## expr -> CASET expr OF LBRACE . EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE UNPAIR
##
## Ends in an error in state: 214.
##
## expr -> CASET expr OF LBRACE EMPTYTREE . LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN UNPAIR
##
## Ends in an error in state: 215.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN . RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 216.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN . ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW UNITTYPE
##
## Ends in an error in state: 217.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW . expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID UNPAIR
##
## Ends in an error in state: 218.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr . COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA UNPAIR
##
## Ends in an error in state: 219.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA . NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE UNPAIR
##
## Ends in an error in state: 220.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE . LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN UNPAIR
##
## Ends in an error in state: 221.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN . ID COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID UNPAIR
##
## Ends in an error in state: 222.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID . COMMA ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 223.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA . ID COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 224.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID . COMMA ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID COMMA ID COMMA UNPAIR
##
## Ends in an error in state: 225.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA . ID RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID COMMA ID COMMA ID UNPAIR
##
## Ends in an error in state: 226.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID . RPAREN ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN UNPAIR
##
## Ends in an error in state: 227.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN . ARROW expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW UNITTYPE
##
## Ends in an error in state: 228.
##
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW . expr RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CASET ID OF LBRACE EMPTYTREE LPAREN RPAREN ARROW ID COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW ID UNPAIR
##
## Ends in an error in state: 229.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr . RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## CASET expr OF LBRACE EMPTYTREE LPAREN RPAREN ARROW expr COMMA NODE LPAREN ID COMMA ID COMMA ID RPAREN ARROW expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN ID UNPAIR
##
## Ends in an error in state: 231.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> CAST LPAREN expr . COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 232.
##
## expr -> CAST LPAREN expr COMMA . ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CAST LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 233.
##
## expr -> CAST LPAREN expr COMMA ID . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CAST LPAREN expr COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN ID UNPAIR
##
## Ends in an error in state: 235.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> CONS LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN ID COMMA UNITTYPE
##
## Ends in an error in state: 236.
##
## expr -> CONS LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CONS LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 237.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> CONS LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## CONS LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEBUG LPAREN ID UNPAIR
##
## Ends in an error in state: 239.
##
## expr -> DEBUG LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## DEBUG LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: DEREF LPAREN ID UNPAIR
##
## Ends in an error in state: 241.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> DEREF LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## DEREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: EMPTYPRED LPAREN ID UNPAIR
##
## Ends in an error in state: 243.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> EMPTYPRED LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## EMPTYPRED LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FST LPAREN ID UNPAIR
##
## Ends in an error in state: 245.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> FST LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## FST LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: HD LPAREN ID UNPAIR
##
## Ends in an error in state: 247.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> HD LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## HD LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF ID UNPAIR
##
## Ends in an error in state: 249.
##
## expr -> expr . PLUS expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> IF expr . THEN expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES THEN RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## IF expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF ID THEN UNITTYPE
##
## Ends in an error in state: 250.
##
## expr -> IF expr THEN . expr ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF ID THEN ID UNPAIR
##
## Ends in an error in state: 251.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> IF expr THEN expr . ELSE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS ELSE DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF ID THEN ID ELSE UNITTYPE
##
## Ends in an error in state: 252.
##
## expr -> IF expr THEN expr ELSE . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: IF ID THEN ID ELSE ID UNITTYPE
##
## Ends in an error in state: 253.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> IF expr THEN expr ELSE expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## IF expr THEN expr ELSE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN ID UNPAIR
##
## Ends in an error in state: 254.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> INSTANCEOF LPAREN expr . COMMA ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN ID COMMA UNPAIR
##
## Ends in an error in state: 255.
##
## expr -> INSTANCEOF LPAREN expr COMMA . ID RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INSTANCEOF LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 256.
##
## expr -> INSTANCEOF LPAREN expr COMMA ID . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## INSTANCEOF LPAREN expr COMMA ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISNUMBER LPAREN ID UNPAIR
##
## Ends in an error in state: 258.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> ISNUMBER LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## ISNUMBER LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ISZERO LPAREN ID UNPAIR
##
## Ends in an error in state: 260.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> ISZERO LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## ISZERO LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LANGLE ID RPAREN
##
## Ends in an error in state: 262.
##
## expr -> LANGLE loption(separated_nonempty_list(COMMA,expr)) . RANGLE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LANGLE loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALSMUTABLE ID UNPAIR
##
## Ends in an error in state: 264.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## field -> ID EQUALSMUTABLE expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALSMUTABLE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALS UNITTYPE
##
## Ends in an error in state: 265.
##
## field -> ID EQUALS . expr [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALS ID UNPAIR
##
## Ends in an error in state: 266.
##
## expr -> expr . PLUS expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES SEMICOLON RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## field -> ID EQUALS expr . [ SEMICOLON RBRACE ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LBRACE ID EQUALS ID SEMICOLON UNPAIR
##
## Ends in an error in state: 271.
##
## separated_nonempty_list(SEMICOLON,field) -> field SEMICOLON . separated_nonempty_list(SEMICOLON,field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## field SEMICOLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS ID UNPAIR
##
## Ends in an error in state: 273.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS ID IN UNITTYPE
##
## Ends in an error in state: 274.
##
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET LANGLE RANGLE EQUALS ID IN ID UNITTYPE
##
## Ends in an error in state: 275.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET LANGLE loption(separated_nonempty_list(COMMA,ID)) RANGLE EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID UNPAIR
##
## Ends in an error in state: 276.
##
## expr -> LET ID . EQUALS expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS UNITTYPE
##
## Ends in an error in state: 277.
##
## expr -> LET ID EQUALS . expr IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS ID UNPAIR
##
## Ends in an error in state: 278.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> LET ID EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS ID IN UNITTYPE
##
## Ends in an error in state: 279.
##
## expr -> LET ID EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LET ID EQUALS ID IN ID UNITTYPE
##
## Ends in an error in state: 280.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LET ID EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LET ID EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS ID UNPAIR
##
## Ends in an error in state: 281.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN ID EQUALS DOT DIVIDED ]
## rdecs -> ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr . [ IN ID ]
##
## The known suffix of the stack is as follows:
## ID LPAREN ID option(type_annotation) RPAREN option(type_annotation) EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS ID IN UNITTYPE
##
## Ends in an error in state: 285.
##
## expr -> LETREC nonempty_list(rdecs) IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LETREC nonempty_list(rdecs) IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LETREC ID LPAREN ID RPAREN EQUALS ID IN ID UNITTYPE
##
## Ends in an error in state: 286.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LETREC nonempty_list(rdecs) IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LETREC nonempty_list(rdecs) IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN MINUS ID UNPAIR
##
## Ends in an error in state: 287.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> LPAREN MINUS expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN MINUS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN ID THEN
##
## Ends in an error in state: 289.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN expr . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES SUPER SUM SND SETREF SET SEND SELF RRANGLE RPAREN PROD PROC PLUS PAIR NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EQUALS EMPTYTREE EMPTYPRED EMPTYLIST DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN ID COMMA UNITTYPE
##
## Ends in an error in state: 291.
##
## expr -> LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 292.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: LPAREN ID ID UNPAIR
##
## Ends in an error in state: 294.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> LPAREN expr expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## LPAREN expr expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MAXL LPAREN ID RANGLE
##
## Ends in an error in state: 296.
##
## expr -> MAXL LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MAXL LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN ID UNPAIR
##
## Ends in an error in state: 298.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> MIN LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN ID COMMA UNITTYPE
##
## Ends in an error in state: 299.
##
## expr -> MIN LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MIN LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 300.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> MIN LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## MIN LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: MKLIST LPAREN ID RANGLE
##
## Ends in an error in state: 302.
##
## expr -> MKLIST LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## MKLIST LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEW ID LPAREN ID RANGLE
##
## Ends in an error in state: 304.
##
## expr -> NEW ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NEW ID LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NEWREF LPAREN ID UNPAIR
##
## Ends in an error in state: 306.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> NEWREF LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## NEWREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN ID UNPAIR
##
## Ends in an error in state: 308.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> NODE LPAREN expr . COMMA expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN ID COMMA UNITTYPE
##
## Ends in an error in state: 309.
##
## expr -> NODE LPAREN expr COMMA . expr COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 310.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> NODE LPAREN expr COMMA expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN ID COMMA ID COMMA UNITTYPE
##
## Ends in an error in state: 311.
##
## expr -> NODE LPAREN expr COMMA expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: NODE LPAREN ID COMMA ID COMMA ID UNPAIR
##
## Ends in an error in state: 312.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> NODE LPAREN expr COMMA expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## NODE LPAREN expr COMMA expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN ID UNPAIR
##
## Ends in an error in state: 314.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> PAIR LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN ID COMMA UNITTYPE
##
## Ends in an error in state: 315.
##
## expr -> PAIR LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PAIR LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 316.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> PAIR LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## PAIR LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROC LPAREN ID RPAREN LBRACE ID UNPAIR
##
## Ends in an error in state: 318.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> PROC LPAREN ID option(type_annotation) RPAREN LBRACE expr . RBRACE [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## PROC LPAREN ID option(type_annotation) RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: PROD LPAREN ID RANGLE
##
## Ends in an error in state: 320.
##
## expr -> PROD LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## PROD LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND ID UNPAIR
##
## Ends in an error in state: 322.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE ID EQUALS DOT DIVIDED ]
## expr -> SEND expr . ID LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND ID ID UNPAIR
##
## Ends in an error in state: 323.
##
## expr -> SEND expr ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND ID ID LPAREN UNITTYPE
##
## Ends in an error in state: 324.
##
## expr -> SEND expr ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SEND ID ID LPAREN ID RANGLE
##
## Ends in an error in state: 325.
##
## expr -> SEND expr ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SEND expr ID LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SET ID EQUALS ID UNITTYPE
##
## Ends in an error in state: 327.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> SET ID EQUALS expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SET ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN ID UNPAIR
##
## Ends in an error in state: 328.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> SETREF LPAREN expr . COMMA expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS DOT DIVIDED COMMA ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN ID COMMA UNITTYPE
##
## Ends in an error in state: 329.
##
## expr -> SETREF LPAREN expr COMMA . expr RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SETREF LPAREN ID COMMA ID UNPAIR
##
## Ends in an error in state: 330.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> SETREF LPAREN expr COMMA expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## SETREF LPAREN expr COMMA expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SND LPAREN ID UNPAIR
##
## Ends in an error in state: 332.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> SND LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## SND LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUM LPAREN ID RANGLE
##
## Ends in an error in state: 334.
##
## expr -> SUM LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUM LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: SUPER ID LPAREN ID RANGLE
##
## Ends in an error in state: 336.
##
## expr -> SUPER ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## SUPER ID LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 202, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr
## In state 199, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: TL LPAREN ID UNPAIR
##
## Ends in an error in state: 338.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RPAREN PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> TL LPAREN expr . RPAREN [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## TL LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS ID UNPAIR
##
## Ends in an error in state: 340.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr . IN expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE IN EQUALS DOT DIVIDED ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS ID IN UNITTYPE
##
## Ends in an error in state: 341.
##
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN . expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: UNPAIR LPAREN ID COMMA ID RPAREN EQUALS ID IN ID UNITTYPE
##
## Ends in an error in state: 342.
##
## expr -> expr . PLUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . MINUS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . TIMES expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DIVIDED expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . EQUALS expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . RRANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . LLANGLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN expr . [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ UNPAIR TL TIMES THEN SUPER SUM SND SETREF SET SEND SEMICOLON SELF RRANGLE RPAREN RBRACE RANGLE PROD PROC PLUS PAIR OF NODE NEWREF NEW MKLIST MINUS MIN MAXL LPAREN LLANGLE LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IN IF ID HD FST EQUALS EOF END EMPTYTREE EMPTYPRED EMPTYLIST ELSE DOT DIVIDED DEREF DEBUG CONS COMMA CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## UNPAIR LPAREN ID COMMA ID RPAREN EQUALS expr IN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE ID UNPAIR
##
## Ends in an error in state: 343.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## method_decl -> METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr . RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD BOOLTYPE SEMICOLON
##
## Ends in an error in state: 345.
##
## method_decl -> METHOD texpr . ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
## texpr -> texpr . ARROW texpr [ TIMES ID ARROW ]
## texpr -> texpr . TIMES texpr [ TIMES ID ARROW ]
##
## The known suffix of the stack is as follows:
## METHOD texpr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID UNPAIR
##
## Ends in an error in state: 346.
##
## method_decl -> METHOD texpr ID . LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN UNPAIR
##
## Ends in an error in state: 347.
##
## method_decl -> METHOD texpr ID LPAREN . loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN RPAREN UNPAIR
##
## Ends in an error in state: 349.
##
## method_decl -> METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN . LBRACE expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN RPAREN LBRACE UNITTYPE
##
## Ends in an error in state: 350.
##
## method_decl -> METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE . expr RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID ID LPAREN RPAREN LBRACE ID UNPAIR
##
## Ends in an error in state: 351.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE RBRACE PLUS MINUS LLANGLE EQUALS DOT DIVIDED ]
## method_decl -> METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr . RBRACE [ RBRACE METHOD ]
##
## The known suffix of the stack is as follows:
## METHOD texpr ID LPAREN loption(separated_nonempty_list(COMMA,formal_par)) RPAREN LBRACE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: CLASS ID EXTENDS ID LBRACE METHOD ID LPAREN RPAREN LBRACE ID RBRACE UNPAIR
##
## Ends in an error in state: 353.
##
## list(method_decl) -> method_decl . list(method_decl) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## method_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: ID UNPAIR
##
## Ends in an error in state: 360.
##
## expr -> expr . PLUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . MINUS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . TIMES expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . DIVIDED expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . EQUALS expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . RRANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . LLANGLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . DOT ID [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## expr -> expr . DOT ID EQUALSMUTABLE expr [ TIMES RRANGLE PLUS MINUS LLANGLE EQUALS EOF DOT DIVIDED ]
## prog -> list(iface_or_class_decl) expr . EOF [ # ]
##
## The known suffix of the stack is as follows:
## list(iface_or_class_decl) expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: INTERFACE ID LBRACE RBRACE UNITTYPE
##
## Ends in an error in state: 362.
##
## list(iface_or_class_decl) -> iface_or_class_decl . list(iface_or_class_decl) [ UNPAIR TL SUPER SUM SND SETREF SET SEND SELF PROD PROC PAIR NODE NEWREF NEW MKLIST MIN MAXL LPAREN LETREC LET LBRACE LANGLE ISZERO ISNUMBER INT INSTANCEOF IF ID HD FST EMPTYTREE EMPTYPRED EMPTYLIST DEREF DEBUG CONS CAST CASET BEGIN AVG ABS ]
##
## The known suffix of the stack is as follows:
## iface_or_class_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

